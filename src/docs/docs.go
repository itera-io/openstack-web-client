// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/health/": {
            "get": {
                "description": "Health Check",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health Check",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "400": {
                        "description": "Failed",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v1/users/auth": {
            "post": {
                "description": "Authenticate User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Authenticate User",
                "parameters": [
                    {
                        "description": "AuthenticateUserRequest",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.AuthenticateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "400": {
                        "description": "Failed",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "409": {
                        "description": "Failed",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v1/users/validate": {
            "post": {
                "description": "Validate User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Validate User",
                "parameters": [
                    {
                        "description": "ValidateUserRequest",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ValidateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "400": {
                        "description": "Failed",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "409": {
                        "description": "Failed",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v2/apiversions": {
            "get": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "List ApiVersion",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ApiVersions"
                ],
                "summary": "List ApiVersion",
                "parameters": [
                    {
                        "description": "ListApiVersion Request",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ListApiVersionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ListApiVersion response",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ListApiVersionResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v2/availabilityzones": {
            "get": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "List AvailabilityZone",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AvailabilityZones"
                ],
                "summary": "List AvailabilityZone",
                "parameters": [
                    {
                        "description": "ListAvailabilityZone Request",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ListAvailabilityZoneRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ListAvailabilityZone response",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ListAvailabilityZoneResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v2/compute/limits": {
            "get": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "Get Compute Limits",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ComputeLimits"
                ],
                "summary": "Get Compute Limits",
                "responses": {
                    "200": {
                        "description": "GetComputeLimits response",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.GetComputeLimitResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v2/flavors": {
            "get": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "List Flavor",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Flavors"
                ],
                "summary": "List Flavor",
                "parameters": [
                    {
                        "description": "ListFlavor Request",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ListFlavorRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ListFlavor response",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ListFlavorResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v2/flavors/{id}": {
            "get": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "Get Flavor by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Flavors"
                ],
                "summary": "Get Flavor",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GetFlavor response",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.GetFlavorResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v2/images": {
            "get": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "List Image",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "List Image",
                "parameters": [
                    {
                        "description": "ListImage Request",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ListImageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ListImage response",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ListImageResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v2/images/{id}": {
            "get": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "Get Image by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "Get Image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GetImage response",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.GetImageResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v2/networking/networks": {
            "get": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "List Networks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Networks"
                ],
                "summary": "List Networks",
                "parameters": [
                    {
                        "description": "ListNetwork Request",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ListNetworkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ListNetwork response",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ListNetworkResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v2/networking/quotas": {
            "get": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "Get Network Quotas",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NetworkQuotas"
                ],
                "summary": "Get Network Quotas",
                "parameters": [
                    {
                        "description": "GetNetworkQuota Request",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.GetNetworkQuotaRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GetNetworkQuota response",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.GetNetworkQuotaResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v2/networking/subnets": {
            "get": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "List Network Subnets",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NetworkSubnets"
                ],
                "summary": "List Network Subnets",
                "parameters": [
                    {
                        "description": "ListNetworkSubnet Request",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ListNetworkSubnetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ListNetworkSubnet response",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ListNetworkSubnetResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v2/servers": {
            "get": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "List Server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Servers"
                ],
                "summary": "List Server",
                "parameters": [
                    {
                        "description": "ListServer Request",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ListServerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ListServer response",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ListServerResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v2/servers/{id}": {
            "get": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "Get Server by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Servers"
                ],
                "summary": "Get Server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GetServer response",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.GetServerResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v2/servers/{id}/reboot": {
            "put": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "Reboot Server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Servers"
                ],
                "summary": "Reboot Server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "RebootServerRequest",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.RebootServerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "RebootServer response",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.RebootServerResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v2/servers/{id}/remote-consoles": {
            "put": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "CreateRemoteConsole",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Servers"
                ],
                "summary": "Create RemoteConsole",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "CreateRemoteConsoleRequest",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.CreateRemoteConsoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CreateRemoteConsole response",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.CreateRemoteConsoleResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v2/servers/{id}/shelve": {
            "put": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "Shelve Server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Servers"
                ],
                "summary": "Shelve Server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ShelveServer response",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v2/servers/{id}/start": {
            "put": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "Start Server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Servers"
                ],
                "summary": "Start Server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "StartServer response",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v2/servers/{id}/stop": {
            "put": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "Stop Server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Servers"
                ],
                "summary": "Stop Server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "StopServer response",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v2/servers/{id}/unshelve": {
            "put": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "Unshelve Server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Servers"
                ],
                "summary": "Unshelve Server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "UnshelveServer response",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v3/projects": {
            "get": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "List Project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "List Project",
                "parameters": [
                    {
                        "description": "ListProjectRequest",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ListProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ListProject response",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ListProjectResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "Create Project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Create Project",
                "parameters": [
                    {
                        "description": "CreateProjectRequest",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.CreateProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CreateProject response",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.CreateProjectResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v3/regions": {
            "get": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "List User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "List User",
                "parameters": [
                    {
                        "description": "ListUserRequest",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ListUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ListUser response",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ListUserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v3/roles": {
            "get": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "List Role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "List Role",
                "parameters": [
                    {
                        "description": "ListRoleRequest",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ListRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ListRole response",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ListRoleResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v3/roles/{id}": {
            "put": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "Assign Role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Assign Role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "AssignRoleRequest",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.AssignRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "AssignRole response",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.AssignRoleResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v3/users": {
            "post": {
                "description": "Create User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create User",
                "parameters": [
                    {
                        "description": "CreateUserRequest",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "400": {
                        "description": "Failed",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "409": {
                        "description": "Failed",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v3/users/{id}/projects": {
            "get": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "List UserProject",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserProjects"
                ],
                "summary": "List UserProject",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ListUserProject response",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ListUserProjectResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v3/volume/limits": {
            "get": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "Get Volume Limits",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VolumeLimits"
                ],
                "summary": "Get Volume Limits",
                "responses": {
                    "200": {
                        "description": "GetVolumeLimits response",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.GetVolumeLimitResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        },
        "/v3/volumetypes": {
            "get": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "List VolumeType",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VolumeTypes"
                ],
                "summary": "List VolumeType",
                "parameters": [
                    {
                        "description": "ListVolumeType Request",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ListVolumeTypeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ListVolumeType response",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ListVolumeTypeResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apiversions.APIVersion": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID is the unique identifier of the API version.",
                    "type": "string"
                },
                "min_version": {
                    "description": "MinVersion is the minimum microversion supported.",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the API versions status.",
                    "type": "string"
                },
                "updated": {
                    "description": "Updated is the date when the API was last updated.",
                    "type": "string"
                },
                "version": {
                    "description": "Version is the maximum microversion supported.",
                    "type": "string"
                }
            }
        },
        "availabilityzones.AvailabilityZone": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The availability zone ID.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the availability zone.",
                    "type": "string"
                }
            }
        },
        "flavors.Flavor": {
            "type": "object",
            "properties": {
                "OS-FLV-EXT-DATA:ephemeral": {
                    "description": "Ephemeral is the amount of ephemeral disk space, measured in GB.",
                    "type": "integer"
                },
                "description": {
                    "description": "Description is a free form description of the flavor. Limited to\n65535 characters in length. Only printable characters are allowed.\nNew in version 2.55",
                    "type": "string"
                },
                "disk": {
                    "description": "Disk is the amount of root disk, measured in GB.",
                    "type": "integer"
                },
                "id": {
                    "description": "ID is the flavor's unique ID.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the flavor.",
                    "type": "string"
                },
                "os-flavor-access:is_public": {
                    "description": "IsPublic indicates whether the flavor is public.",
                    "type": "boolean"
                },
                "ram": {
                    "description": "RAM is the amount of memory, measured in MB.",
                    "type": "integer"
                },
                "rxtx_factor": {
                    "description": "RxTxFactor describes bandwidth alterations of the flavor.",
                    "type": "number"
                },
                "vcpus": {
                    "description": "VCPUs indicates how many (virtual) CPUs are available for this flavor.",
                    "type": "integer"
                }
            }
        },
        "github_com_gophercloud_gophercloud_openstack_blockstorage_extensions_limits.Absolute": {
            "type": "object",
            "properties": {
                "maxTotalBackupGigabytes": {
                    "description": "MaxTotalBackupGigabytes is the maximum total amount of backups, in gibibytes (GiB).",
                    "type": "integer"
                },
                "maxTotalBackups": {
                    "description": "MaxTotalBackups is the maximum number of backups.",
                    "type": "integer"
                },
                "maxTotalSnapshots": {
                    "description": "MaxTotalSnapshots is the maximum number of snapshots.",
                    "type": "integer"
                },
                "maxTotalVolumeGigabytes": {
                    "description": "MaxTotalVolumeGigabytes is the maximum total amount of volumes, in gibibytes (GiB).",
                    "type": "integer"
                },
                "maxTotalVolumes": {
                    "description": "MaxTotalVolumes is the maximum number of volumes.",
                    "type": "integer"
                },
                "totalBackupGigabytesUsed": {
                    "description": "TotalBackupGigabytesUsed is the total number of backups gibibytes (GiB) used.",
                    "type": "integer"
                },
                "totalBackupsUsed": {
                    "description": "TotalBackupsUsed is the total number of backups used.",
                    "type": "integer"
                },
                "totalGigabytesUsed": {
                    "description": "TotalGigabytesUsed is the total number of gibibytes (GiB) used.",
                    "type": "integer"
                },
                "totalSnapshotsUsed": {
                    "description": "TotalSnapshotsUsed the total number of snapshots used.",
                    "type": "integer"
                },
                "totalVolumesUsed": {
                    "description": "TotalVolumesUsed is the total number of volumes used.",
                    "type": "integer"
                }
            }
        },
        "github_com_gophercloud_gophercloud_openstack_blockstorage_extensions_limits.Limits": {
            "type": "object",
            "properties": {
                "absolute": {
                    "description": "Absolute contains the limits and usage information.\nAn absolute limit value of -1 indicates that the absolute limit for the item is infinite.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_gophercloud_gophercloud_openstack_blockstorage_extensions_limits.Absolute"
                        }
                    ]
                },
                "rate": {
                    "description": "Rate contains rate-limit volume copy bandwidth, used to mitigate slow down of data access from the instances.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/limits.Rate"
                    }
                }
            }
        },
        "github_com_gophercloud_gophercloud_openstack_compute_v2_extensions_limits.Absolute": {
            "type": "object",
            "properties": {
                "maxImageMeta": {
                    "description": "MaxImageMeta is the amount of image metadata available to a tenant.",
                    "type": "integer"
                },
                "maxPersonality": {
                    "description": "MaxPersonality is the amount of personality/files available to a tenant.",
                    "type": "integer"
                },
                "maxPersonalitySize": {
                    "description": "MaxPersonalitySize is the personality file size available to a tenant.",
                    "type": "integer"
                },
                "maxSecurityGroupRules": {
                    "description": "MaxSecurityGroupRules is the number of security group rules available to\na tenant.",
                    "type": "integer"
                },
                "maxSecurityGroups": {
                    "description": "MaxSecurityGroups is the number of security groups available to a tenant.",
                    "type": "integer"
                },
                "maxServerGroupMembers": {
                    "description": "MaxServerGroupMembers is the number of server group members available\nto a tenant.",
                    "type": "integer"
                },
                "maxServerGroups": {
                    "description": "MaxServerGroups is the number of server groups available to a tenant.",
                    "type": "integer"
                },
                "maxServerMeta": {
                    "description": "MaxServerMeta is the amount of server metadata available to a tenant.",
                    "type": "integer"
                },
                "maxTotalCores": {
                    "description": "MaxTotalCores is the number of cores available to a tenant.",
                    "type": "integer"
                },
                "maxTotalFloatingIps": {
                    "description": "MaxTotalFloatingIps is the number of floating IPs available to a tenant.",
                    "type": "integer"
                },
                "maxTotalInstances": {
                    "description": "MaxTotalInstances is the number of instances/servers available to a tenant.",
                    "type": "integer"
                },
                "maxTotalKeypairs": {
                    "description": "MaxTotalKeypairs is the total keypairs available to a tenant.",
                    "type": "integer"
                },
                "maxTotalRAMSize": {
                    "description": "MaxTotalRAMSize is the total amount of RAM available to a tenant measured\nin megabytes (MB).",
                    "type": "integer"
                },
                "totalCoresUsed": {
                    "description": "TotalCoresUsed is the number of cores currently in use.",
                    "type": "integer"
                },
                "totalFloatingIpsUsed": {
                    "description": "TotalFloatingIpsUsed is the number of floating IPs in use.",
                    "type": "integer"
                },
                "totalInstancesUsed": {
                    "description": "TotalInstancesUsed is the number of instances/servers in use.",
                    "type": "integer"
                },
                "totalRAMUsed": {
                    "description": "TotalRAMUsed is the total RAM/memory in use measured in megabytes (MB).",
                    "type": "integer"
                },
                "totalSecurityGroupsUsed": {
                    "description": "TotalSecurityGroupsUsed is the total number of security groups in use.",
                    "type": "integer"
                },
                "totalServerGroupsUsed": {
                    "description": "TotalServerGroupsUsed is the total number of server groups in use.",
                    "type": "integer"
                }
            }
        },
        "github_com_gophercloud_gophercloud_openstack_compute_v2_extensions_limits.Limits": {
            "type": "object",
            "properties": {
                "absolute": {
                    "description": "Absolute contains the limits and usage information.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_gophercloud_gophercloud_openstack_compute_v2_extensions_limits.Absolute"
                        }
                    ]
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.AssignRoleRequest": {
            "type": "object",
            "properties": {
                "projectId": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.AssignRoleResponse": {
            "type": "object"
        },
        "github_com_itera-io_openstack-web-client_api_dto.AuthenticateUserRequest": {
            "type": "object",
            "required": [
                "url"
            ],
            "properties": {
                "applicationCredentialID": {
                    "description": "Authentication through Application Credentials requires supplying name, project and secret\nFor project we can use TenantID",
                    "type": "string"
                },
                "applicationCredentialName": {
                    "type": "string"
                },
                "applicationCredentialSecret": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.CommonDto": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.CreateProjectRequest": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "minLength": 6
                },
                "domain_id": {
                    "description": "DomainID is the ID this project will belong under.",
                    "type": "string"
                },
                "enabled": {
                    "description": "Enabled sets the project status to enabled or disabled.",
                    "type": "boolean"
                },
                "is_domain": {
                    "description": "IsDomain indicates if this project is a domain.",
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "minLength": 3
                },
                "parent_id": {
                    "description": "ParentID specifies the parent project of this new project.",
                    "type": "string"
                },
                "tags": {
                    "description": "Tags is a list of tags to associate with the project.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.CreateProjectResponse": {
            "type": "object",
            "properties": {
                "project": {
                    "$ref": "#/definitions/projects.Project"
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.CreateRemoteConsoleRequest": {
            "type": "object",
            "properties": {
                "protocol": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.CreateRemoteConsoleResponse": {
            "type": "object",
            "properties": {
                "remoteconsole": {
                    "$ref": "#/definitions/remoteconsoles.RemoteConsole"
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.CreateUserRequest": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "minLength": 6
                },
                "domain_id": {
                    "description": "DomainID is the ID this project will belong under.",
                    "type": "string"
                },
                "enabled": {
                    "description": "Enabled sets the project status to enabled or disabled.",
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "minLength": 3
                },
                "password": {
                    "description": "Password is the password of the new user.",
                    "type": "string"
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.GetComputeLimitResponse": {
            "type": "object",
            "properties": {
                "limits": {
                    "$ref": "#/definitions/github_com_gophercloud_gophercloud_openstack_compute_v2_extensions_limits.Limits"
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.GetFlavorResponse": {
            "type": "object",
            "properties": {
                "flavor": {
                    "$ref": "#/definitions/flavors.Flavor"
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.GetImageResponse": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ImageDto"
                    }
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.GetNetworkQuotaRequest": {
            "type": "object",
            "properties": {
                "projectId": {
                    "type": "string"
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.GetNetworkQuotaResponse": {
            "type": "object",
            "properties": {
                "quota": {
                    "$ref": "#/definitions/quotas.Quota"
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.GetServerResponse": {
            "type": "object",
            "properties": {
                "server": {
                    "$ref": "#/definitions/servers.Server"
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.GetVolumeLimitResponse": {
            "type": "object",
            "properties": {
                "limits": {
                    "$ref": "#/definitions/github_com_gophercloud_gophercloud_openstack_blockstorage_extensions_limits.Limits"
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.ImageDto": {
            "type": "object",
            "properties": {
                "disk": {
                    "description": "Disk is the amount of root disk, measured in GB.",
                    "type": "integer"
                },
                "id": {
                    "description": "ID is the flavor's unique ID.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the flavor.",
                    "type": "string"
                },
                "ram": {
                    "description": "RAM is the amount of memory, measured in MB.",
                    "type": "integer"
                },
                "status": {
                    "description": "VCPUs indicates how many (virtual) CPUs are available for this flavor.",
                    "type": "string"
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.ImageListItem": {
            "type": "object",
            "properties": {
                "disk": {
                    "description": "Disk is the amount of root disk, measured in GB.",
                    "type": "integer"
                },
                "id": {
                    "description": "ID is the flavor's unique ID.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the flavor.",
                    "type": "string"
                },
                "ram": {
                    "description": "RAM is the amount of memory, measured in MB.",
                    "type": "integer"
                },
                "tag": {
                    "description": "Tags filters on specific image tags.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListApiVersionRequest": {
            "type": "object"
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListApiVersionResponse": {
            "type": "object",
            "properties": {
                "apiversions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apiversions.APIVersion"
                    }
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListAvailabilityZoneRequest": {
            "type": "object"
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListAvailabilityZoneResponse": {
            "type": "object",
            "properties": {
                "availabilityzones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/availabilityzones.AvailabilityZone"
                    }
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListFlavorRequest": {
            "type": "object",
            "properties": {
                "minDisk": {
                    "type": "integer"
                },
                "minRam": {
                    "type": "integer"
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListFlavorResponse": {
            "type": "object",
            "properties": {
                "flavors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/flavors.Flavor"
                    }
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListImageRequest": {
            "type": "object",
            "properties": {
                "owner": {
                    "description": "Owner filters on the project ID of the image.",
                    "type": "string"
                },
                "status": {
                    "description": "Status filters on the status of the image.\nMultiple statuses can be specified by constructing a string\nsuch as \"in:saving,queued,active\".",
                    "type": "string"
                },
                "tag": {
                    "description": "Tags filters on specific image tags.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListImageResponse": {
            "type": "object",
            "properties": {
                "images": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.ImageListItem"
                    }
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListNetworkRequest": {
            "type": "object"
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListNetworkResponse": {
            "type": "object",
            "properties": {
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/networks.Network"
                    }
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListNetworkSubnetRequest": {
            "type": "object",
            "properties": {
                "projectId": {
                    "type": "string"
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListNetworkSubnetResponse": {
            "type": "object",
            "properties": {
                "subnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/subnets.Subnet"
                    }
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListProjectRequest": {
            "type": "object"
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListProjectResponse": {
            "type": "object",
            "properties": {
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/projects.Project"
                    }
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListRegionRequest": {
            "type": "object"
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListRegionResponse": {
            "type": "object",
            "properties": {
                "regions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.CommonDto"
                    }
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListRoleRequest": {
            "type": "object",
            "properties": {
                "domain_id": {
                    "description": "DomainID filters the response by a domain ID.",
                    "type": "string"
                },
                "name": {
                    "description": "Name filters the response by role name.",
                    "type": "string"
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListRoleResponse": {
            "type": "object",
            "properties": {
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/roles.Role"
                    }
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListServerRequest": {
            "type": "object",
            "properties": {
                "flavor": {
                    "description": "Flavor is the name of the flavor in URL format.",
                    "type": "string"
                },
                "ip": {
                    "description": "IP is a regular expression to match the IPv4 address of the server.",
                    "type": "string"
                },
                "limit": {
                    "description": "Limit is an integer value for the limit of values to return.",
                    "type": "integer"
                },
                "name": {
                    "description": "Name of the server as a string; can be queried with regular expressions.\nRealize that ?name=bob returns both bob and bobb. If you need to match bob\nonly, you can use a regular expression matching the syntax of the\nunderlying database server implemented for Compute.",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the value of the status of the server so that you can filter on\n\"ACTIVE\" for example.",
                    "type": "string"
                },
                "tags": {
                    "description": "This requires the client to be set to microversion 2.26 or later.\nTags filters on specific server tags. All tags must be present for the server.",
                    "type": "string"
                },
                "tenant_id": {
                    "description": "TenantID lists servers for a particular tenant.\nSetting \"AllTenants = true\" is required.",
                    "type": "string"
                },
                "user_id": {
                    "description": "This requires the client to be set to microversion 2.83 or later, unless\nthe user is an admin.\nUserID lists servers for a particular user.",
                    "type": "string"
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListServerResponse": {
            "type": "object",
            "properties": {
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/servers.Server"
                    }
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListUserProjectResponse": {
            "type": "object",
            "properties": {
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_dto.CommonDto"
                    }
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListUserRequest": {
            "type": "object",
            "properties": {
                "domain_id": {
                    "description": "DomainID filters the response by a domain ID.",
                    "type": "string"
                },
                "enabled": {
                    "description": "Enabled filters the response by enabled users.",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name filters the response by username.",
                    "type": "string"
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListUserResponse": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/users.User"
                    }
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListVolumeTypeRequest": {
            "type": "object"
        },
        "github_com_itera-io_openstack-web-client_api_dto.ListVolumeTypeResponse": {
            "type": "object",
            "properties": {
                "volumetypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/volumetypes.VolumeType"
                    }
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.RebootServerRequest": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type is the type of reboot to perform on the server.",
                    "type": "string"
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_dto.RebootServerResponse": {
            "type": "object"
        },
        "github_com_itera-io_openstack-web-client_api_dto.ValidateUserRequest": {
            "type": "object",
            "required": [
                "password",
                "url",
                "username"
            ],
            "properties": {
                "domain": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                },
                "url": {
                    "type": "string"
                },
                "username": {
                    "type": "string",
                    "minLength": 3
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_helper.BaseHttpResponse": {
            "type": "object",
            "properties": {
                "error": {},
                "result": {},
                "resultCode": {
                    "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_helper.ResultCode"
                },
                "success": {
                    "type": "boolean"
                },
                "validationErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_itera-io_openstack-web-client_api_validations.ValidationError"
                    }
                }
            }
        },
        "github_com_itera-io_openstack-web-client_api_helper.ResultCode": {
            "type": "integer",
            "enum": [
                0,
                40001,
                40101,
                40301,
                40401,
                42901,
                42902,
                50001,
                50002
            ],
            "x-enum-varnames": [
                "Success",
                "ValidationError",
                "AuthError",
                "ForbiddenError",
                "NotFoundError",
                "LimiterError",
                "OtpLimiterError",
                "CustomRecovery",
                "InternalError"
            ]
        },
        "github_com_itera-io_openstack-web-client_api_validations.ValidationError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "property": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "limits.Limit": {
            "type": "object",
            "properties": {
                "next-available": {
                    "type": "string"
                },
                "remaining": {
                    "type": "integer"
                },
                "unit": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                },
                "verb": {
                    "type": "string"
                }
            }
        },
        "limits.Rate": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/limits.Limit"
                    }
                },
                "regex": {
                    "type": "string"
                },
                "uri": {
                    "type": "string"
                }
            }
        },
        "networks.Network": {
            "type": "object",
            "properties": {
                "admin_state_up": {
                    "description": "The administrative state of network. If false (down), the network does not\nforward packets.",
                    "type": "boolean"
                },
                "availability_zone_hints": {
                    "description": "Availability zone hints groups network nodes that run services like DHCP, L3, FW, and others.\nUsed to make network resources highly available.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "description": "Description for the network",
                    "type": "string"
                },
                "id": {
                    "description": "UUID for the network",
                    "type": "string"
                },
                "name": {
                    "description": "Human-readable name for the network. Might not be unique.",
                    "type": "string"
                },
                "project_id": {
                    "description": "ProjectID is the project owner of the network.",
                    "type": "string"
                },
                "revision_number": {
                    "description": "RevisionNumber optionally set via extensions/standard-attr-revisions",
                    "type": "integer"
                },
                "shared": {
                    "description": "Specifies whether the network resource can be accessed by any tenant.",
                    "type": "boolean"
                },
                "status": {
                    "description": "Indicates whether network is currently operational. Possible values include\n` + "`" + `ACTIVE', ` + "`" + `DOWN', ` + "`" + `BUILD', or ` + "`" + `ERROR'. Plug-ins might define additional\nvalues.",
                    "type": "string"
                },
                "subnets": {
                    "description": "Subnets associated with this network.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "description": "Tags optionally set via extensions/attributestags",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenant_id": {
                    "description": "TenantID is the project owner of the network.",
                    "type": "string"
                }
            }
        },
        "projects.Project": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description is the description of the project.",
                    "type": "string"
                },
                "domain_id": {
                    "description": "DomainID is the domain ID the project belongs to.",
                    "type": "string"
                },
                "enabled": {
                    "description": "Enabled is whether or not the project is enabled.",
                    "type": "boolean"
                },
                "id": {
                    "description": "ID is the unique ID of the project.",
                    "type": "string"
                },
                "is_domain": {
                    "description": "IsDomain indicates whether the project is a domain.",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name is the name of the project.",
                    "type": "string"
                },
                "options": {
                    "description": "Options are defined options in the API to enable certain features.",
                    "type": "object",
                    "additionalProperties": true
                },
                "parent_id": {
                    "description": "ParentID is the parent_id of the project.",
                    "type": "string"
                },
                "tags": {
                    "description": "Tags is the list of tags associated with the project.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "quotas.Quota": {
            "type": "object",
            "properties": {
                "floatingip": {
                    "description": "FloatingIP represents a number of floating IPs. A \"-1\" value means no limit.",
                    "type": "integer"
                },
                "network": {
                    "description": "Network represents a number of networks. A \"-1\" value means no limit.",
                    "type": "integer"
                },
                "port": {
                    "description": "Port represents a number of ports. A \"-1\" value means no limit.",
                    "type": "integer"
                },
                "rbac_policy": {
                    "description": "RBACPolicy represents a number of RBAC policies. A \"-1\" value means no limit.",
                    "type": "integer"
                },
                "router": {
                    "description": "Router represents a number of routers. A \"-1\" value means no limit.",
                    "type": "integer"
                },
                "security_group": {
                    "description": "SecurityGroup represents a number of security groups. A \"-1\" value means no limit.",
                    "type": "integer"
                },
                "security_group_rule": {
                    "description": "SecurityGroupRule represents a number of security group rules. A \"-1\" value means no limit.",
                    "type": "integer"
                },
                "subnet": {
                    "description": "Subnet represents a number of subnets. A \"-1\" value means no limit.",
                    "type": "integer"
                },
                "subnetpool": {
                    "description": "SubnetPool represents a number of subnet pools. A \"-1\" value means no limit.",
                    "type": "integer"
                },
                "trunk": {
                    "description": "Trunk represents a number of trunks. A \"-1\" value means no limit.",
                    "type": "integer"
                }
            }
        },
        "remoteconsoles.RemoteConsole": {
            "type": "object",
            "properties": {
                "protocol": {
                    "description": "Protocol contains remote console protocol.\nYou can use the RemoteConsoleProtocol custom type to unmarshal raw JSON\nresponse into the pre-defined valid console protocol.",
                    "type": "string"
                },
                "type": {
                    "description": "Type contains remote console type.\nYou can use the RemoteConsoleType custom type to unmarshal raw JSON\nresponse into the pre-defined valid console type.",
                    "type": "string"
                },
                "url": {
                    "description": "URL can be used to connect to the remote console.",
                    "type": "string"
                }
            }
        },
        "roles.Role": {
            "type": "object",
            "properties": {
                "domain_id": {
                    "description": "DomainID is the domain ID the role belongs to.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique ID of the role.",
                    "type": "string"
                },
                "links": {
                    "description": "Links contains referencing links to the role.",
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "description": "Name is the role name",
                    "type": "string"
                }
            }
        },
        "servers.AttachedVolume": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "servers.Fault": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "created": {
                    "type": "string"
                },
                "details": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "servers.Server": {
            "type": "object",
            "properties": {
                "accessIPv4": {
                    "description": "AccessIPv4 and AccessIPv6 contain the IP addresses of the server,\nsuitable for remote access for administration.",
                    "type": "string"
                },
                "accessIPv6": {
                    "type": "string"
                },
                "addresses": {
                    "description": "Addresses includes a list of all IP addresses assigned to the server,\nkeyed by pool.",
                    "type": "object",
                    "additionalProperties": true
                },
                "adminPass": {
                    "description": "AdminPass will generally be empty (\"\").  However, it will contain the\nadministrative password chosen when provisioning a new server without a\nset AdminPass setting in the first place.\nNote that this is the ONLY time this field will be valid.",
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "fault": {
                    "description": "Fault contains failure information about a server.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/servers.Fault"
                        }
                    ]
                },
                "flavor": {
                    "description": "Flavor refers to a JSON object, which itself indicates the hardware\nconfiguration of the deployed server.",
                    "type": "object",
                    "additionalProperties": true
                },
                "hostid": {
                    "description": "HostID is the host where the server is located in the cloud.",
                    "type": "string"
                },
                "id": {
                    "description": "ID uniquely identifies this server amongst all other servers,\nincluding those not accessible to the current tenant.",
                    "type": "string"
                },
                "key_name": {
                    "description": "KeyName indicates which public key was injected into the server on launch.",
                    "type": "string"
                },
                "links": {
                    "description": "Links includes HTTP references to the itself, useful for passing along to\nother APIs that might want a server reference.",
                    "type": "array",
                    "items": {}
                },
                "metadata": {
                    "description": "Metadata includes a list of all user-specified key-value pairs attached\nto the server.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name contains the human-readable name for the server.",
                    "type": "string"
                },
                "os-extended-volumes:volumes_attached": {
                    "description": "AttachedVolumes includes the volume attachments of this instance",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/servers.AttachedVolume"
                    }
                },
                "progress": {
                    "description": "Progress ranges from 0..100.\nA request made against the server completes only once Progress reaches 100.",
                    "type": "integer"
                },
                "security_groups": {
                    "description": "SecurityGroups includes the security groups that this instance has applied\nto it.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                },
                "server_groups": {
                    "description": "ServerGroups is a slice of strings containing the UUIDs of the\nserver groups to which the server belongs. Currently this can\ncontain at most one entry.\nNew in microversion 2.71",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "description": "Status contains the current operational status of the server,\nsuch as IN_PROGRESS or ACTIVE.",
                    "type": "string"
                },
                "tags": {
                    "description": "Tags is a slice/list of string tags in a server.\nThe requires microversion 2.26 or later.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenant_id": {
                    "description": "TenantID identifies the tenant owning this server resource.",
                    "type": "string"
                },
                "updated": {
                    "description": "Updated and Created contain ISO-8601 timestamps of when the state of the\nserver last changed, and when it was created.",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserID uniquely identifies the user account owning the tenant.",
                    "type": "string"
                }
            }
        },
        "subnets.AllocationPool": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "string"
                },
                "start": {
                    "type": "string"
                }
            }
        },
        "subnets.HostRoute": {
            "type": "object",
            "properties": {
                "destination": {
                    "type": "string"
                },
                "nexthop": {
                    "type": "string"
                }
            }
        },
        "subnets.Subnet": {
            "type": "object",
            "properties": {
                "allocation_pools": {
                    "description": "Sub-ranges of CIDR available for dynamic allocation to ports.\nSee AllocationPool.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/subnets.AllocationPool"
                    }
                },
                "cidr": {
                    "description": "CIDR representing IP range for this subnet, based on IP version.",
                    "type": "string"
                },
                "description": {
                    "description": "Description for the subnet.",
                    "type": "string"
                },
                "dns_nameservers": {
                    "description": "DNS name servers used by hosts in this subnet.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "enable_dhcp": {
                    "description": "Specifies whether DHCP is enabled for this subnet or not.",
                    "type": "boolean"
                },
                "gateway_ip": {
                    "description": "Default gateway used by devices in this subnet.",
                    "type": "string"
                },
                "host_routes": {
                    "description": "Routes that should be used by devices with IPs from this subnet\n(not including local subnet route).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/subnets.HostRoute"
                    }
                },
                "id": {
                    "description": "UUID representing the subnet.",
                    "type": "string"
                },
                "ip_version": {
                    "description": "IP version, either ` + "`" + `4' or ` + "`" + `6'.",
                    "type": "integer"
                },
                "ipv6_address_mode": {
                    "description": "The IPv6 address modes specifies mechanisms for assigning IPv6 IP addresses.",
                    "type": "string"
                },
                "ipv6_ra_mode": {
                    "description": "The IPv6 router advertisement specifies whether the networking service\nshould transmit ICMPv6 packets.",
                    "type": "string"
                },
                "name": {
                    "description": "Human-readable name for the subnet. Might not be unique.",
                    "type": "string"
                },
                "network_id": {
                    "description": "UUID of the parent network.",
                    "type": "string"
                },
                "project_id": {
                    "description": "ProjectID is the project owner of the subnet.",
                    "type": "string"
                },
                "revision_number": {
                    "description": "RevisionNumber optionally set via extensions/standard-attr-revisions",
                    "type": "integer"
                },
                "service_types": {
                    "description": "Service types associated with the subnet.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subnetpool_id": {
                    "description": "SubnetPoolID is the id of the subnet pool associated with the subnet.",
                    "type": "string"
                },
                "tags": {
                    "description": "Tags optionally set via extensions/attributestags",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenant_id": {
                    "description": "TenantID is the project owner of the subnet.",
                    "type": "string"
                }
            }
        },
        "users.User": {
            "type": "object",
            "properties": {
                "default_project_id": {
                    "description": "DefaultProjectID is the ID of the default project of the user.",
                    "type": "string"
                },
                "description": {
                    "description": "Description is the description of the user.",
                    "type": "string"
                },
                "domain_id": {
                    "description": "DomainID is the domain ID the user belongs to.",
                    "type": "string"
                },
                "enabled": {
                    "description": "Enabled is whether or not the user is enabled.",
                    "type": "boolean"
                },
                "id": {
                    "description": "ID is the unique ID of the user.",
                    "type": "string"
                },
                "links": {
                    "description": "Links contains referencing links to the user.",
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "description": "Name is the name of the user.",
                    "type": "string"
                },
                "options": {
                    "description": "Options are a set of defined options of the user.",
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "volumetypes.VolumeType": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Human-readable description for the volume type.",
                    "type": "string"
                },
                "extra_specs": {
                    "description": "Arbitrary key-value pairs defined by the user.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "description": "Unique identifier for the volume type.",
                    "type": "string"
                },
                "is_public": {
                    "description": "Whether the volume type is publicly visible.",
                    "type": "boolean"
                },
                "name": {
                    "description": "Human-readable display name for the volume type.",
                    "type": "string"
                },
                "os-volume-type-access:is_public": {
                    "description": "Volume Type access public attribute",
                    "type": "boolean"
                },
                "qos_specs_id": {
                    "description": "Qos Spec ID",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
